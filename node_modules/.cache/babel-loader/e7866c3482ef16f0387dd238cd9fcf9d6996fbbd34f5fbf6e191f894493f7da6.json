{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\nlet initialState = {\n  todos: []\n};\n\n// const getTodos = async () => {\n//   try{\n//       const res = await axios.get(`http://localhost:3001/api/v1/todos`)\n//       return res.data;\n//   }\n//   catch(e){\n\n//   }\n// }\n\n// getTodos().then((data)=>{\n//   initialState['todos'] = data;\n\n// })\n\nconsole.log(initialState);\n// axios.get(`http://localhost:3001/api/v1/todos`)\n//   .then(res => {\n//     initialState['todos'] = res.data;\n\n//   });\n\n// initialState[\"todos\"] =  [\n//     {\n//       id: 1,\n//       title: \"post 1\",\n//       description:\n//         \"Quisque cursus, metus vitae pharetra Nam libero tempore, cum soluta nobis est eligendi\",\n//         dueDate: new Date(),\n//         priority: 1\n//     },\n//     {\n//       id: 2,\n//       title: \"post 2\",\n//       description:\n//         \"Harum quidem rerum facilis est et expedita distinctio quas molestias excepturi sint\",\n//         dueDate: new Date(),\n//         priority: 2\n//     },\n//   ];\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case actionTypes.ADD_TODO:\n      const newTodo = {\n        id: Math.random(),\n        // not really unique\n        title: action.todo.title,\n        description: action.todo.description,\n        dueDate: action.todo.dueDate,\n        priority: action.todo.priority\n      };\n      return {\n        ...state,\n        todos: state.todos.concat(newTodo)\n      };\n    case actionTypes.GET_TODO:\n      return {\n        ...state,\n        todos: action.todo\n      };\n    case actionTypes.REMOVE_TODO:\n      const updatedTodos = state.todos.filter(todo => todo.id !== action.todo.id);\n      return {\n        ...state,\n        todos: updatedTodos\n      };\n  }\n  return state;\n};\nexport default reducer;","map":{"version":3,"names":["actionTypes","initialState","todos","console","log","reducer","state","action","type","ADD_TODO","newTodo","id","Math","random","title","todo","description","dueDate","priority","concat","GET_TODO","REMOVE_TODO","updatedTodos","filter"],"sources":["/Users/brijeshrawat/Documents/projects/todoApp/todo-app-frontend/src/store/reducer.ts"],"sourcesContent":["import * as actionTypes from \"./actionTypes\";\n\nlet initialState: TodoState = {todos: []};\n\n\n// const getTodos = async () => {\n//   try{\n//       const res = await axios.get(`http://localhost:3001/api/v1/todos`)\n//       return res.data;\n//   }\n//   catch(e){\n      \n//   }\n// }\n\n// getTodos().then((data)=>{\n//   initialState['todos'] = data;\n\n// })\n\nconsole.log(initialState);\n// axios.get(`http://localhost:3001/api/v1/todos`)\n//   .then(res => {\n//     initialState['todos'] = res.data;\n    \n//   });\n\n\n// initialState[\"todos\"] =  [\n//     {\n//       id: 1,\n//       title: \"post 1\",\n//       description:\n//         \"Quisque cursus, metus vitae pharetra Nam libero tempore, cum soluta nobis est eligendi\",\n//         dueDate: new Date(),\n//         priority: 1\n//     },\n//     {\n//       id: 2,\n//       title: \"post 2\",\n//       description:\n//         \"Harum quidem rerum facilis est et expedita distinctio quas molestias excepturi sint\",\n//         dueDate: new Date(),\n//         priority: 2\n//     },\n//   ];\n\nconst reducer = (\n    state: TodoState = initialState,\n    action: any\n  ): any => {\n    switch (action.type) {\n      case actionTypes.ADD_TODO:\n        const newTodo:any = {\n          id: Math.random(), // not really unique\n          title: action.todo.title,\n          description: action.todo.description,\n          dueDate: action.todo.dueDate,\n          priority: action.todo.priority\n        }\n        return {\n          ...state,\n          todos: state.todos.concat(newTodo),\n        }\n        case actionTypes.GET_TODO:\n        \n          return {\n            ...state,\n            todos: action.todo,\n          }  \n      case actionTypes.REMOVE_TODO:\n        const updatedTodos: ITodo[] = state.todos.filter(\n          todo => todo.id !== action.todo.id\n        )\n        return {\n          ...state,\n          todos: updatedTodos,\n        }\n    }\n    return state\n  }\n  \n  export default reducer"],"mappings":"AAAA,OAAO,KAAKA,WAAW,MAAM,eAAe;AAE5C,IAAIC,YAAuB,GAAG;EAACC,KAAK,EAAE;AAAE,CAAC;;AAGzC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEAC,OAAO,CAACC,GAAG,CAACH,YAAY,CAAC;AACzB;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMI,OAAO,GAAG,YAGJ;EAAA,IAFRC,KAAgB,uEAAGL,YAAY;EAAA,IAC/BM,MAAW;EAEX,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKR,WAAW,CAACS,QAAQ;MACvB,MAAMC,OAAW,GAAG;QAClBC,EAAE,EAAEC,IAAI,CAACC,MAAM,EAAE;QAAE;QACnBC,KAAK,EAAEP,MAAM,CAACQ,IAAI,CAACD,KAAK;QACxBE,WAAW,EAAET,MAAM,CAACQ,IAAI,CAACC,WAAW;QACpCC,OAAO,EAAEV,MAAM,CAACQ,IAAI,CAACE,OAAO;QAC5BC,QAAQ,EAAEX,MAAM,CAACQ,IAAI,CAACG;MACxB,CAAC;MACD,OAAO;QACL,GAAGZ,KAAK;QACRJ,KAAK,EAAEI,KAAK,CAACJ,KAAK,CAACiB,MAAM,CAACT,OAAO;MACnC,CAAC;IACD,KAAKV,WAAW,CAACoB,QAAQ;MAEvB,OAAO;QACL,GAAGd,KAAK;QACRJ,KAAK,EAAEK,MAAM,CAACQ;MAChB,CAAC;IACL,KAAKf,WAAW,CAACqB,WAAW;MAC1B,MAAMC,YAAqB,GAAGhB,KAAK,CAACJ,KAAK,CAACqB,MAAM,CAC9CR,IAAI,IAAIA,IAAI,CAACJ,EAAE,KAAKJ,MAAM,CAACQ,IAAI,CAACJ,EAAE,CACnC;MACD,OAAO;QACL,GAAGL,KAAK;QACRJ,KAAK,EAAEoB;MACT,CAAC;EAAA;EAEL,OAAOhB,KAAK;AACd,CAAC;AAED,eAAeD,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}
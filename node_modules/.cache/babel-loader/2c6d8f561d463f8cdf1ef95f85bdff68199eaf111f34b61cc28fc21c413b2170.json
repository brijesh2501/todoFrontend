{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\nlet initialState = {\n  todos: []\n};\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case actionTypes.ADD_TODO:\n      const newTodo = {\n        id: Math.random(),\n        // not really unique\n        title: action.todo.title,\n        description: action.todo.description,\n        dueDate: action.todo.dueDate,\n        priority: action.todo.priority\n      };\n      return {\n        ...state,\n        todos: state.todos.concat(newTodo)\n      };\n    case actionTypes.GET_TODO:\n      return {\n        ...state,\n        todos: action.todo\n      };\n    case actionTypes.REMOVE_TODO:\n      const updatedTodos = state.todos.filter(todo => todo.id !== action.todo.id);\n      return {\n        ...state,\n        todos: updatedTodos\n      };\n  }\n  return state;\n};\nexport default reducer;","map":{"version":3,"names":["actionTypes","initialState","todos","reducer","state","action","type","ADD_TODO","newTodo","id","Math","random","title","todo","description","dueDate","priority","concat","GET_TODO","REMOVE_TODO","updatedTodos","filter"],"sources":["/Users/brijeshrawat/Documents/projects/todoApp/todo-app-frontend/src/store/reducer.ts"],"sourcesContent":["import * as actionTypes from \"./actionTypes\";\n\nlet initialState: TodoState = {todos: []};\n\nconst reducer = (\n    state: TodoState = initialState,\n    action: any\n  ): any => {\n    switch (action.type) {\n      case actionTypes.ADD_TODO:\n        const newTodo:any = {\n          id: Math.random(), // not really unique\n          title: action.todo.title,\n          description: action.todo.description,\n          dueDate: action.todo.dueDate,\n          priority: action.todo.priority\n        }\n        return {\n          ...state,\n          todos: state.todos.concat(newTodo),\n        }\n        case actionTypes.GET_TODO:\n        \n          return {\n            ...state,\n            todos: action.todo,\n          }  \n      case actionTypes.REMOVE_TODO:\n        const updatedTodos: ITodo[] = state.todos.filter(\n          todo => todo.id !== action.todo.id\n        )\n        return {\n          ...state,\n          todos: updatedTodos,\n        }\n    }\n    return state\n  }\n  \n  export default reducer"],"mappings":"AAAA,OAAO,KAAKA,WAAW,MAAM,eAAe;AAE5C,IAAIC,YAAuB,GAAG;EAACC,KAAK,EAAE;AAAE,CAAC;AAEzC,MAAMC,OAAO,GAAG,YAGJ;EAAA,IAFRC,KAAgB,uEAAGH,YAAY;EAAA,IAC/BI,MAAW;EAEX,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKN,WAAW,CAACO,QAAQ;MACvB,MAAMC,OAAW,GAAG;QAClBC,EAAE,EAAEC,IAAI,CAACC,MAAM,EAAE;QAAE;QACnBC,KAAK,EAAEP,MAAM,CAACQ,IAAI,CAACD,KAAK;QACxBE,WAAW,EAAET,MAAM,CAACQ,IAAI,CAACC,WAAW;QACpCC,OAAO,EAAEV,MAAM,CAACQ,IAAI,CAACE,OAAO;QAC5BC,QAAQ,EAAEX,MAAM,CAACQ,IAAI,CAACG;MACxB,CAAC;MACD,OAAO;QACL,GAAGZ,KAAK;QACRF,KAAK,EAAEE,KAAK,CAACF,KAAK,CAACe,MAAM,CAACT,OAAO;MACnC,CAAC;IACD,KAAKR,WAAW,CAACkB,QAAQ;MAEvB,OAAO;QACL,GAAGd,KAAK;QACRF,KAAK,EAAEG,MAAM,CAACQ;MAChB,CAAC;IACL,KAAKb,WAAW,CAACmB,WAAW;MAC1B,MAAMC,YAAqB,GAAGhB,KAAK,CAACF,KAAK,CAACmB,MAAM,CAC9CR,IAAI,IAAIA,IAAI,CAACJ,EAAE,KAAKJ,MAAM,CAACQ,IAAI,CAACJ,EAAE,CACnC;MACD,OAAO;QACL,GAAGL,KAAK;QACRF,KAAK,EAAEkB;MACT,CAAC;EAAA;EAEL,OAAOhB,KAAK;AACd,CAAC;AAED,eAAeD,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}